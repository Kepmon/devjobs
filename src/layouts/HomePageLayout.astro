---
import BaseLayout from './BaseLayout.astro'
import { allJobsDb } from '../xata'
import JobCard from '../components/JobCard.astro'
import FilterOptions from '../components/FilterOptions.astro'
import CustomButton from '../components/CustomButton.astro'
import NoJobInfo from '../components/NoJobInfo.astro'
import ErrorToast from '../components/ErrorToast.astro'
import { filterJobs } from '../helpers/jobsForm'

interface Props {
  dataLoad: 'index' | 'filteredJobs'
}

const { searchParams } = Astro.url
const pageNumber =
  searchParams.get('page') != null ? Number(searchParams.get('page')) : 0
const { dataLoad } = Astro.props

let jobs
if (searchParams.size === 0) {
  jobs = await allJobsDb.getPaginated({
    pagination: { size: 12, offset: 0 }
  })
}

if (pageNumber > 0) {
  jobs = await allJobsDb.getPaginated({
    pagination: { size: 12, offset: (pageNumber - 1) * 12 }
  })
}

if (searchParams.size > 0 && pageNumber === 0) {
  const allJobs = await allJobsDb.getAll()
  jobs = filterJobs(searchParams, allJobs)
}

const isNoJobInfoDisplayed =
  jobs != null && !('records' in jobs) && jobs.length === 0
const isThereAnotherPage =
  jobs != null && 'records' in jobs ? jobs.hasNextPage() : false

let isFetchingError = false
if (jobs == null) {
  isFetchingError = true
}
---

<BaseLayout title="DevJobs | Home">
  {isFetchingError && <ErrorToast showingClass="translate-y-0" />}
  <main class="grid gap-12 xs:gap-32 [&:has([data-svg])]:gap-16">
    <div>
      <FilterOptions />
      <p data-error="invalid-form" class="scale-0 invalid-form">
        You need to fill at least one input in
      </p>
    </div>
    <div class="grid pb-[104px]">
      {isNoJobInfoDisplayed && <NoJobInfo />}
      <div
        class="grid md:grid-auto-fit-[350px] gap-y-[65px] gap-x-6"
        data-container="jobs"
      >
        {
          jobs != null &&
            'records' in jobs &&
            jobs.records.map((job) => <JobCard job={job} />)
        }
        {
          jobs != null &&
            !('records' in jobs) &&
            jobs.map((job) => <JobCard job={job.item} />)
        }
      </div>
      {
        isThereAnotherPage && (
          <CustomButton
            moreClasses="justify-self-center mt-14"
            dataLoad={dataLoad}
            dataNext={isThereAnotherPage.toString()}
          >
            Load More
          </CustomButton>
        )
      }
    </div>
  </main>
</BaseLayout>

<script>
  import { addListenerToLoadButton } from '../helpers/loadMoreButton'
  import { prePopulateForm, addListenerToForm } from '../helpers/jobsForm'

  const jobsForm = document.querySelector(
    '[data-form="jobs"]'
  ) as HTMLFormElement
  const loadButton = document.querySelector(
    '[data-load]'
  ) as null | HTMLButtonElement

  const isNextPage = loadButton?.dataset.next === 'true'

  prePopulateForm()
  addListenerToLoadButton(isNextPage, loadButton)
  addListenerToForm(jobsForm)
</script>

<style>
  .invalid-form {
    @apply text-sm text-red-300 font-[500];
  }

  .invalid-form.scale-100 {
    @apply text-sm text-red-300 font-[500] transition-transform origin-left duration-300;
  }
</style>
