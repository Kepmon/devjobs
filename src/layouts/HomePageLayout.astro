---
import type { JobErrorObject } from '../types/jobs'
import BaseLayout from './BaseLayout.astro'
import JobCard from '../components/JobCard.astro'
import FilterOptions from '../components/FilterOptions.astro'
import CustomButton from '../components/CustomButton.astro'
import NoJobInfo from '../components/NoJobInfo.astro'
import { allJobsDb } from '../xata'

interface Props {
  dataLoad: 'index' | 'filteredJobs'
  isIndex?: true
}

const { dataLoad, isIndex } = Astro.props
let jobs

try {
  jobs = await allJobsDb.getAll()

  if (jobs == null) throw new Error()
} catch (err) {
  ;(err as JobErrorObject).errors.forEach((error) => {
    // eslint-disable-next-line no-console
    console.warn(`${error.status}: ${error.message}`)
  })
}
---

<BaseLayout title="DevJobs | Home">
  <main class="grid gap-32 [&:has([data-svg])]:gap-16">
    <div>
      <FilterOptions />
      <p data-error="invalid-form" class="scale-0 invalid-form">
        You need to fill at least one input in
      </p>
    </div>
    <div class="grid pb-[104px]">
      <div
        class="grid md:grid-auto-fit-[350px] gap-y-[65px] gap-x-6"
        data-container="jobs"
      >
        {
          isIndex &&
            jobs != null &&
            jobs.map((job, index) =>
              index + 1 < 13 ? <JobCard job={job} /> : null
            )
        }
        <template data-template="jobs">
          {jobs != null && jobs.map((job) => <JobCard job={job} />)}
        </template>
        <template data-template="no-jobs-message">
          <NoJobInfo />
        </template>
      </div>
      {
        (
          <CustomButton
            moreClasses="justify-self-center mt-14"
            dataLoad={dataLoad}
          >
            Load More
          </CustomButton>
        )
      }
    </div>
  </main>
</BaseLayout>

<script>
  import {
    addListenerToLoadButton,
    addListenerToWindow
  } from '../helpers/loadMoreButton'
  import { loadFilteredJobs, addListenerToForm } from '../helpers/jobsForm'

  const cardContainers = [...document.querySelectorAll('.card-container')]
  const errorToast = document.querySelector('.error-toast')
  const loadButton = document.querySelector(
    '[data-load]'
  ) as null | HTMLButtonElement

  const currentPath = window.location.pathname

  if (currentPath === '/') {
    if (cardContainers.length === 0) {
      errorToast?.classList.add('error-toast-visible')

      setTimeout(() => {
        errorToast?.classList.remove('error-toast-visible')
      }, 3000)
    }
  }

  if (currentPath !== '/') {
    const filteredJobsLength = await loadFilteredJobs()
    addListenerToLoadButton(loadButton, filteredJobsLength)
  } else {
    addListenerToLoadButton(loadButton)
  }

  addListenerToForm()
  addListenerToWindow(loadButton)
</script>

<style>
  .invalid-form {
    @apply text-sm text-red-300 font-[500];
  }

  .invalid-form.scale-100 {
    @apply text-sm text-red-300 font-[500] transition-transform origin-left duration-300;
  }
</style>
