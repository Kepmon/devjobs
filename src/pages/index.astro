---
import type { SelectedPick } from '@xata.io/client'
import type { JobCardType } from '../types/jobs'
import type { AllJobsRecord } from '../xata'
import BaseLayout from '../layouts/BaseLayout.astro'
import JobCard from '../components/JobCard.astro'
import FilterOptions from '../components/FilterOptions.astro'
import CustomButton from '../components/CustomButton.astro'
import NoJobInfo from '../components/NoJobInfo.astro'
import Spinner from '../components/Spinner.astro'
import { fetchJobs } from '../helpers/jobsData'

const { searchParams } = Astro.url

let isThereAnotherPage = true
let isResponseError = false
let jobs: Readonly<SelectedPick<AllJobsRecord, Partial<JobCardType>[]>>[] = []

const { returnedJobs, anotherPage, isError } = await fetchJobs(searchParams)

jobs = returnedJobs
isThereAnotherPage = anotherPage
isResponseError = isError

const isNoJobInfoDisplayed = jobs.length === 0
---

<template data-template="spinner">
  <Spinner />
</template>
<BaseLayout title="DevJobs | Home">
  <main class="grid gap-12 xs:gap-32 [&:has([data-svg])]:gap-16">
    <div>
      <FilterOptions />
      <p data-error="invalid-form" class="scale-0 invalid-form">
        You need to fill at least one input in
      </p>
    </div>
    <div class="grid pb-[104px]">
      <NoJobInfo
        isDisplayed={isNoJobInfoDisplayed.toString()}
        isError={isResponseError}
      />
      <div
        class="grid md:grid-cols-fill-350 gap-y-[65px] gap-x-6"
        data-container="jobs"
      >
        {jobs.length > 0 && jobs.map((job) => <JobCard job={job} />)}
      </div>
      {
        isThereAnotherPage && (
          <CustomButton
            moreClasses="justify-self-center mt-14 blue-outline"
            dataNext={isThereAnotherPage.toString()}
            dataButton="load"
          >
            Load More
          </CustomButton>
        )
      }
    </div>
  </main>
</BaseLayout>

<script>
  import { addListenerToLoadButton } from '../helpers/loadMoreButton'
  import {
    prePopulateForm,
    addListenerToForm,
    addListenerToDoubledInputs,
    addListenerToWindow
  } from '../helpers/jobsForm'

  const jobPagesCount = 1
  const jobsForm = document.querySelector(
    '[data-form="jobs"]'
  ) as HTMLFormElement
  const loadButton = document.querySelector(
    '[data-button="load"]'
  ) as null | HTMLButtonElement

  prePopulateForm()
  addListenerToLoadButton(jobPagesCount, loadButton)
  addListenerToForm(jobsForm)
  addListenerToDoubledInputs()
  addListenerToWindow()
</script>

<style>
  .invalid-form {
    @apply text-sm text-red-300 font-[500];
  }

  .invalid-form.scale-100 {
    @apply text-sm text-red-300 font-[500] transition-transform origin-left duration-300;
  }
</style>
